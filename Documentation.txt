// Author: Joshua Coleman
// Purpose of this file: Description of infrasctructure of the
Twitter monitoring application task and Planning Documenation
--------------------------------------------------------------
Specification:
    Write a program that monitors Twitter account.
    Program must output text from new Tweets to stdout.

1. Output to stdout 5 most recent Tweets right after execution.
    -> Refresh every 10 min 
2. Twitter handle will be provided as a command line argument by the user starting the program.
3. Make sure to use scraping or APIs that do not require authentication or a twitter developer account.

NOTE: No open source libraries such as Twint, Tweepy to do the 
heavy lifting. 

BONUS #1: Modify program to add a simple API to dump all the Tweets collected so far in a JSON format via simple curl command.

BONUS #2: Write a Dockerfile that encapsulates this program.
          The Dockerfile should expose your API and also enable the Tweets to be seen via stdout.


--------------------------------------------------------------
| Application's infrastructure and Planning                  |
--------------------------------------------------------------
--------------------------------------------------------------

--------------------------------------------------------------
| >> Choice of Tools/Structure/Language/Version/Etc          |
--------------------------------------------------------------
Necessary for the development and the reasoning behind it.

--------------------------------------------------------------
|                                                            |
| 1. Docker                                                  |
|                                                            |
--------------------------------------------------------------
> https://docs.docker.com/
> https://djangostars.com/blog/what-is-docker-and-how-to-use-it-with-python/
> Benefits in general:
    -> Faster development process
    -> Handy application encapsulation
    -> The same behaviour on local machine / dev / staging / production servers
    -> Easy and clear monitoring
    -> Easy to scale
    -> Faster development process

> There is no need to install 3rd-party apps like PostgreSQL, Redis, Elasticsearch on the system – you can run it in containers. 

> Docker is an open-source tool that automates the deployment of an application inside a software container. 

> Docker gives you a unified image format to distribute you applications across different host systems and cloud services. You can deliver your application in one piece with all the required dependencies (included in an image) ready to run.

> Docker also gives you the ability to run different versions of same application simultaneously. 

For example, say you need to do some manual data migration from an older version of Postgres to a newer version. You can have such a situation in microservice architecture when you want to create a new microservice with a new version of the 3rd-party software.

> How does this differ from virtualization?
Traditionally, virtual machines were used to avoid this unexpected behavior. The main problem with VM is that an “extra OS” on top of the host operating system adds gigabytes of space to the project. Most of the time your server will host several VMs that will take up even more space. And by the way, at the moment, most cloud-based server providers will charge you for that extra space. Another significant drawback of VM is a slow boot.

Docker eliminates all the above by simply sharing the OS kernel across all the containers running as separate processes of the host OS.

-> An interactive shell inside a Docker container:

docker run -i -t --rm ubuntu /bin/bash  
-t flag assigns a pseudo-tty or terminal inside the new container.
-i flag allows you to make an interactive connection by grabbing the standard input (STDIN) of the container.
–rm flag automatically removes the container when the process exits. By default, containers are not deleted. This container exists until we keep the shell session and terminates when we exit the session (like an SSH session with a remote server).

-> If you want to keep the container running after the end of the session, you need to daemonize it:

docker run --name daemon -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"  
    –name daemon assigns daemon name to a new container. If you don’t specify a name explicitly, Docker will generate and assign it automatically.
    -d flag runs the container in the background (i.e., daemonizes it).

-> Check which containers running:

docker ps -a  
    -> lists processes
    Console output:

    CONTAINER ID  IMAGE   COMMAND                 CREATED             STATUS                         PORTS  NAMES  
    1fc8cee64ec2  ubuntu  "/bin/sh -c 'while..."  32 seconds ago      Up 30 seconds                         daemon  
    c006f1a02edf  ubuntu  "/bin/echo 'Hello ..."  About a minute ago  Exited (0) About a minute ago         gifted_nobel  
        > docker ps is a command to list containers.
        > -a shows all containers (without -a flag ps will show only running containers).

-> DOCKERFILE REFERENCE: 
https://docs.docker.com/engine/reference/builder/
HOW TO: https://runnable.com/docker/python/dockerize-your-python-application
    > Docker can build images automatically by reading the instructions from a Dockerfile. 
    > A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. 
    > Using docker build users can create an automated build that executes several command-line instructions in succession.

--------------------------------------------------------------
|                                                            |
| 2. Setting up venv (virtualenv for python)                 |
|                                                            |
--------------------------------------------------------------
> https://docs.python.org/3/library/venv.html
> Most familiar with virtualenv.
> One of the most widely used with Pyton projects from my experience > simple > and quick setup.
> Req.txt 
    -> a text file with all dependencies/libraries that will be installed within the virtual environment set for the project.
    -> usually generated itself, but don't forget to update if you add new libs afterwards to your project files.

-> 1. Creation of virtual environments is done by executing the command venv: python3 -m venv /path/to/new/virtual/environment

--------------------------------------------------------------
|                                                            |
| 3. Choosing Python Version and PEP Standard                |
|                                                            |
--------------------------------------------------------------
> Python 3.8 - https://docs.python.org/3/
    -> because 2 is depricated since January 1, 2020
> PEP 8 (abbr. Python Enhancement Proposal) - https://realpython.com/python-pep8/
    -> most popular and personal preference - like the style myself, simple and clean, makes most sense compared to how I would format the code.

--------------------------------------------------------------
|                                                            |
| 4. User Interface                                          |
|                                                            |
--------------------------------------------------------------
> input will be provided through sdtin
> output will be provided through stdout
> instructions on applications usage
    -> will be printed out in stdout once the user runs the application (for the user)
    -> in the comment section of the code (for the future developer)
    -> will be provided in README.txt (for the documentation)


--------------------------------------------------------------
| >> Application Development Planning                        |
--------------------------------------------------------------
-> 1. Dependencies (also listed in
 reqs.txt):


--------------------------------------------------------------
|                                                            |
| 1.1. Standard Libraries                                    |
|                                                            |
--------------------------------------------------------------
import sys
import json
import time

    
--------------------------------------------------------------
|                                                            |
| 1.2. Twitter's API - GetOldTweets 3                        |
|                                                            |
--------------------------------------------------------------
-> import GetOldTweets3 as got
-> https://pypi.org/project/GetOldTweets3/
-> Scraping API - no auth necessary, as per the requirements.

--------------------------------------------------------------
|                                                            |
| 1.3.  Set up Git - Twitter Monitor repo                    |
|                                                            |
--------------------------------------------------------------
-> git@github.com:jjc224/Twitter-Monitor.git

--------------------------------------------------------------
-> 2. Code Planning Process:
--------------------------------------------------------------
Step 1: Check command line arguments and filter the handle.
Step 2: Use the handle and GetOldTweets3 to retreive tweets for the given handle.
Step 3: Loop through the tweets and format them in order to print them out. 
Step 4: Append to a list that will save all the tweets during program runtime.
Step 5: Create a loop that will sleep for 10 minutes and grab user's latest 5 tweets again.
